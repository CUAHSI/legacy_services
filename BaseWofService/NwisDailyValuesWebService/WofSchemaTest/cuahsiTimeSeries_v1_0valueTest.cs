// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using WaterOneFlow.Schema.v1;
namespace WofSchemaTest
{
    /// <summary>
    ///This is a test class for WaterOneFlow.Schema.v1.ValueSingleVariable and is intended
    ///to contain all WaterOneFlow.Schema.v1.ValueSingleVariable Unit Tests
    ///</summary>
    [TestClass()]
    public class ValueSingleVariableTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for accuracyStdDev
        ///</summary>
        [TestMethod()]
        public void accuracyStdDevTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            double val = 0; // TODO: Assign to an appropriate value for the property

            target.accuracyStdDev = val;


            Assert.AreEqual(val, target.accuracyStdDev, "WaterOneFlow.Schema.v1.ValueSingleVariable.accuracyStdDev was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for accuracyStdDevSpecified
        ///</summary>
        [TestMethod()]
        public void accuracyStdDevSpecifiedTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.accuracyStdDevSpecified = val;


            Assert.AreEqual(val, target.accuracyStdDevSpecified, "WaterOneFlow.Schema.v1.ValueSingleVariable.accuracyStdDevSpecified was not set co" +
                    "rrectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for censorCode
        ///</summary>
        [TestMethod()]
        public void censorCodeTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            CensorCodeEnum val = CensorCodeEnum.lt; // TODO: Assign to an appropriate value for the property

            target.censorCode = val;


            Assert.AreEqual(val, target.censorCode, "WaterOneFlow.Schema.v1.ValueSingleVariable.censorCode was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for censorCodeSpecified
        ///</summary>
        [TestMethod()]
        public void censorCodeSpecifiedTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.censorCodeSpecified = val;


            Assert.AreEqual(val, target.censorCodeSpecified, "WaterOneFlow.Schema.v1.ValueSingleVariable.censorCodeSpecified was not set correc" +
                    "tly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for codedVocabulary
        ///</summary>
        [TestMethod()]
        public void codedVocabularyTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.codedVocabulary = val;


            Assert.AreEqual(val, target.codedVocabulary, "WaterOneFlow.Schema.v1.ValueSingleVariable.codedVocabulary was not set correctly." +
                    "");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for codedVocabularySpecified
        ///</summary>
        [TestMethod()]
        public void codedVocabularySpecifiedTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.codedVocabularySpecified = val;


            Assert.AreEqual(val, target.codedVocabularySpecified, "WaterOneFlow.Schema.v1.ValueSingleVariable.codedVocabularySpecified was not set c" +
                    "orrectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for codedVocabularyTerm
        ///</summary>
        [TestMethod()]
        public void codedVocabularyTermTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.codedVocabularyTerm = val;


            Assert.AreEqual(val, target.codedVocabularyTerm, "WaterOneFlow.Schema.v1.ValueSingleVariable.codedVocabularyTerm was not set correc" +
                    "tly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for dateTime
        ///</summary>
        [TestMethod()]
        public void dateTimeTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            DateTime val = new DateTime(); // TODO: Assign to an appropriate value for the property

            target.dateTime = val;


            Assert.AreEqual(val, target.dateTime, "WaterOneFlow.Schema.v1.ValueSingleVariable.dateTime was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for metadataDateTime
        ///</summary>
        [TestMethod()]
        public void metadataDateTimeTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            DateTime val = new DateTime(); // TODO: Assign to an appropriate value for the property

            target.metadataDateTime = val;


            Assert.AreEqual(val, target.metadataDateTime, "WaterOneFlow.Schema.v1.ValueSingleVariable.metadataDateTime was not set correctly" +
                    ".");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for metadataDateTimeSpecified
        ///</summary>
        [TestMethod()]
        public void metadataDateTimeSpecifiedTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.metadataDateTimeSpecified = val;


            Assert.AreEqual(val, target.metadataDateTimeSpecified, "WaterOneFlow.Schema.v1.ValueSingleVariable.metadataDateTimeSpecified was not set " +
                    "correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for methodID
        ///</summary>
        [TestMethod()]
        public void methodIDTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            int val = 0; // TODO: Assign to an appropriate value for the property

            target.methodID = val;


            Assert.AreEqual(val, target.methodID, "WaterOneFlow.Schema.v1.ValueSingleVariable.methodID was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for methodIDSpecified
        ///</summary>
        [TestMethod()]
        public void methodIDSpecifiedTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.methodIDSpecified = val;


            Assert.AreEqual(val, target.methodIDSpecified, "WaterOneFlow.Schema.v1.ValueSingleVariable.methodIDSpecified was not set correctl" +
                    "y.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for offsetDescription
        ///</summary>
        [TestMethod()]
        public void offsetDescriptionTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.offsetDescription = val;


            Assert.AreEqual(val, target.offsetDescription, "WaterOneFlow.Schema.v1.ValueSingleVariable.offsetDescription was not set correctl" +
                    "y.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for offsetTypeID
        ///</summary>
        [TestMethod()]
        public void offsetTypeIDTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            int val = 0; // TODO: Assign to an appropriate value for the property

            target.offsetTypeID = val;


            Assert.AreEqual(val, target.offsetTypeID, "WaterOneFlow.Schema.v1.ValueSingleVariable.offsetTypeID was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for offsetTypeIDSpecified
        ///</summary>
        [TestMethod()]
        public void offsetTypeIDSpecifiedTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.offsetTypeIDSpecified = val;


            Assert.AreEqual(val, target.offsetTypeIDSpecified, "WaterOneFlow.Schema.v1.ValueSingleVariable.offsetTypeIDSpecified was not set corr" +
                    "ectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for offsetUnitsAbbreviation
        ///</summary>
        [TestMethod()]
        public void offsetUnitsAbbreviationTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.offsetUnitsAbbreviation = val;


            Assert.AreEqual(val, target.offsetUnitsAbbreviation, "WaterOneFlow.Schema.v1.ValueSingleVariable.offsetUnitsAbbreviation was not set co" +
                    "rrectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for offsetUnitsCode
        ///</summary>
        [TestMethod()]
        public void offsetUnitsCodeTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.offsetUnitsCode = val;


            Assert.AreEqual(val, target.offsetUnitsCode, "WaterOneFlow.Schema.v1.ValueSingleVariable.offsetUnitsCode was not set correctly." +
                    "");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for offsetValue
        ///</summary>
        [TestMethod()]
        public void offsetValueTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            double val = 0; // TODO: Assign to an appropriate value for the property

            target.offsetValue = val;


            Assert.AreEqual(val, target.offsetValue, "WaterOneFlow.Schema.v1.ValueSingleVariable.offsetValue was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for offsetValueSpecified
        ///</summary>
        [TestMethod()]
        public void offsetValueSpecifiedTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.offsetValueSpecified = val;


            Assert.AreEqual(val, target.offsetValueSpecified, "WaterOneFlow.Schema.v1.ValueSingleVariable.offsetValueSpecified was not set corre" +
                    "ctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for oid
        ///</summary>
        [TestMethod()]
        public void oidTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.oid = val;


            Assert.AreEqual(val, target.oid, "WaterOneFlow.Schema.v1.ValueSingleVariable.oid was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for qualifiers
        ///</summary>
        [TestMethod()]
        public void qualifiersTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.qualifiers = val;


            Assert.AreEqual(val, target.qualifiers, "WaterOneFlow.Schema.v1.ValueSingleVariable.qualifiers was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for qualityControlLevel
        ///</summary>
        [TestMethod()]
        public void qualityControlLevelTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            QualityControlLevelEnum val = QualityControlLevelEnum.Rawdata; // TODO: Assign to an appropriate value for the property

            target.qualityControlLevel = val;


            Assert.AreEqual(val, target.qualityControlLevel, "WaterOneFlow.Schema.v1.ValueSingleVariable.qualityControlLevel was not set correc" +
                    "tly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for qualityControlLevelSpecified
        ///</summary>
        [TestMethod()]
        public void qualityControlLevelSpecifiedTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.qualityControlLevelSpecified = val;


            Assert.AreEqual(val, target.qualityControlLevelSpecified, "WaterOneFlow.Schema.v1.ValueSingleVariable.qualityControlLevelSpecified was not s" +
                    "et correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for sampleID
        ///</summary>
        [TestMethod()]
        public void sampleIDTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            int val = 0; // TODO: Assign to an appropriate value for the property

            target.sampleID = val;


            Assert.AreEqual(val, target.sampleID, "WaterOneFlow.Schema.v1.ValueSingleVariable.sampleID was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for sampleIDSpecified
        ///</summary>
        [TestMethod()]
        public void sampleIDSpecifiedTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.sampleIDSpecified = val;


            Assert.AreEqual(val, target.sampleIDSpecified, "WaterOneFlow.Schema.v1.ValueSingleVariable.sampleIDSpecified was not set correctl" +
                    "y.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for sourceID
        ///</summary>
        [TestMethod()]
        public void sourceIDTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            int val = 0; // TODO: Assign to an appropriate value for the property

            target.sourceID = val;


            Assert.AreEqual(val, target.sourceID, "WaterOneFlow.Schema.v1.ValueSingleVariable.sourceID was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for sourceIDSpecified
        ///</summary>
        [TestMethod()]
        public void sourceIDSpecifiedTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.sourceIDSpecified = val;


            Assert.AreEqual(val, target.sourceIDSpecified, "WaterOneFlow.Schema.v1.ValueSingleVariable.sourceIDSpecified was not set correctl" +
                    "y.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Value
        ///</summary>
        [TestMethod()]
        public void ValueTest()
        {
            ValueSingleVariable target = new ValueSingleVariable();

            decimal val = 0; // TODO: Assign to an appropriate value for the property

            target.Value = val;


            Assert.AreEqual(val, target.Value, "WaterOneFlow.Schema.v1.ValueSingleVariable.Value was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

    }


}
