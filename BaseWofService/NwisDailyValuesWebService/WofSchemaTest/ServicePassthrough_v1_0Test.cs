// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using System.IO;
using System.Reflection;
using System.Xml;
using System.Xml.Serialization;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using WaterOneFlow.Service.v1_0.Passthrough;
namespace WofSchemaTest
{
    /// <summary>
    ///This is a test class for WaterOneFlow.Service.v1_0.Passthrough.TimeSeriesResponseString and is intended
    ///to contain all WaterOneFlow.Service.v1_0.Passthrough.TimeSeriesResponseString Unit Tests
    ///</summary>
    [TestClass()]
    public class TimeSeriesResponseStringTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for QueryInfo
        ///</summary>
        [TestMethod()]
        [Ignore]
        public void QueryInfoTest()
        {
            TimeSeriesResponseString target = new TimeSeriesResponseString();

            QueryInfoElementString val = null; // TODO: Assign to an appropriate value for the property

            target.QueryInfo = val;


            Assert.AreEqual(val, target.QueryInfo, "WaterOneFlow.Service.v1_0.Passthrough.TimeSeriesResponseString.QueryInfo was not " +
                    "set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for TimeSeriesResponseString ()
        ///</summary>
        [TestMethod()]
        [Ignore]
        public void ConstructorTest()
        {
            TimeSeriesResponseString target = new TimeSeriesResponseString();

            // TODO: Implement code to verify target
            Assert.Inconclusive("TODO: Implement code to verify target");
        }

        /// <summary>
        ///A test for TimeSeriesResponseString (string)
        ///</summary>
        [TestMethod()]
        [Ignore]
        public void ConstructorTest1()
        {
          Assembly asmm=  Assembly.GetExecutingAssembly();
           string[] names = asmm.GetManifestResourceNames();
          Stream s = asmm.GetManifestResourceStream(names[0]);
            string TimeSeriesResponseTypeXml = new StreamReader(s ).ReadToEnd(); 


            TimeSeriesResponseString target = new TimeSeriesResponseString(TimeSeriesResponseTypeXml);
            //("This needs to do some xml comparison")
           // Assert.IsTrue(TimeSeriesResponseTypeXml.Contains(target.Xml));
        }

        /// <summary>
        ///A test for Xml
        ///</summary>
        [TestMethod()]
        public void XmlTest()
        {
            Assembly asmm = Assembly.GetExecutingAssembly();
            string[] names = asmm.GetManifestResourceNames();
            Stream s = asmm.GetManifestResourceStream(names[0]);
            string TimeSeriesResponseTypeXml = new StreamReader(s).ReadToEnd();


            TimeSeriesResponseString target = new TimeSeriesResponseString(TimeSeriesResponseTypeXml);

            XmlSerializer xs = new XmlSerializer(typeof(TimeSeriesResponseString));
            StringWriter textWriter =  new StringWriter();

            xs.Serialize(textWriter, target);

         StreamWriter output =  new StreamWriter("Output.xml");
            output.Write(textWriter);
            Assert.IsTrue(textWriter.ToString().Contains(target.Xml), "WaterOneFlow.Service.v1_0.Passthrough.TimeSeriesResponseString.Xml was not set co" +
                    "rrectly.");
           // Assert.Inconclusive("Verify the correctness of this test method.");
        }

    }


}
