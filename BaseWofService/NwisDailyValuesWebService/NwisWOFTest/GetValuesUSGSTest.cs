// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using NwisWOFService;
using WaterOneFlowImpl;
using WaterOneFlow.Schema.v1;
namespace NwisWOFTest
{
    /// <summary>
    ///This is a test class for NwisWOFService.GetValuesUSGS and is intended
    ///to contain all NwisWOFService.GetValuesUSGS Unit Tests
    ///</summary>
    [TestClass()]
    public class GetValuesUSGSTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for GetValues (locationParam, VariableParam, W3CDateTime?, W3CDateTime?)
        ///</summary>
        /// right now this is just testing that it can get data, and deserialize it.
        /// Hack in place to handle incorrect namespace
        [DeploymentItem("NwisWOFService.exe")]
        [TestMethod()]
        public void GetValuesTest()
        {
            GetValuesDailyUSGS target = new GetValuesDailyUSGS();

            NwisWOFTest.NwisWOFService_GetValuesUSGSAccessor accessor = new NwisWOFTest.NwisWOFService_GetValuesUSGSAccessor(target);

            locationParam Location = new locationParam("NWIS:10263500");
            

            VariableParam Variable =new VariableParam("NWIS:00060");  

            System.Nullable<WaterOneFlowImpl.W3CDateTime> BeginDateTime
                = new W3CDateTime(DateTime.Parse("2005-08-01"));


            System.Nullable<WaterOneFlowImpl.W3CDateTime> EndDateTime =
                new W3CDateTime(DateTime.Parse("2006-08-01")); 


            //TimeSeriesResponseType expected = null;
            TimeSeriesResponseType actual;

            actual = accessor.GetValues(Location, Variable, BeginDateTime, EndDateTime);

            Assert.IsNotNull(actual,"NwisWOFService.GetValuesUSGS.GetValues returned null.");
            
           // (expected, actual, "NwisWOFService.GetValuesUSGS.GetValues did not return the expected value.");
           // Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetValuesUSGS ()
        ///</summary>
        [TestMethod()]
        public void ConstructorTest()
        {
            GetValuesDailyUSGS target = new GetValuesDailyUSGS();

            // TODO: Implement code to verify target
            //Assert.Inconclusive("TODO: Implement code to verify target");
        }

        #region stat code
        /// <summary>
        ///A test for option2UsgsStatCode (VariableParam)
        ///</summary>
        [DeploymentItem("NwisWOFService.exe")]
        [TestMethod()]
        public void option2UsgsStatCodeTest()
        {
            VariableParam vp = new VariableParam("NWIS:00060");


            string expected = "00003";
            string actual;

            actual = NwisWOFTest.NwisWOFService_GetValuesUSGSAccessor.option2UsgsStatCode(vp);

            Assert.AreEqual(expected, actual,
                "NwisWOFService.GetValuesUSGS.option2UsgsStatCode did not return the expected valu" +
                    "e.");
           // Assert.Inconclusive("Verify the correctness of this test method.");
        }
        [TestMethod()]
        public void option2UsgsStatCodeTest2()
        {
            VariableParam vp = new VariableParam("NWIS:00060/statistic=00099");


            string expected = "00099";
            string actual;

            actual = NwisWOFTest.NwisWOFService_GetValuesUSGSAccessor.option2UsgsStatCode(vp);

            Assert.AreEqual(expected, actual,
                "NwisWOFService.GetValuesUSGS.option2UsgsStatCode did not return the expected valu" +
                    "e.");
            // Assert.Inconclusive("Verify the correctness of this test method.");
        }

        [TestMethod()]
        public void option2UsgsStatCodeTest3()
        {
            VariableParam vp = new VariableParam("NWIS:00060/valuetype=Average");


            string expected = "00003";
            string actual;

            actual = NwisWOFTest.NwisWOFService_GetValuesUSGSAccessor.option2UsgsStatCode(vp);

            Assert.AreEqual(expected, actual,
                "NwisWOFService.GetValuesUSGS.option2UsgsStatCode did not return the expected valu" +
                    "e.");
            // Assert.Inconclusive("Verify the correctness of this test method.");
        }
        [TestMethod()]
        public void option2UsgsStatCodeTest4()
        {
            VariableParam vp = new VariableParam("NWIS:00060/ValueType=Minimum");


            string expected = "00002";
            string actual;

            actual = NwisWOFTest.NwisWOFService_GetValuesUSGSAccessor.option2UsgsStatCode(vp);

            Assert.AreEqual(expected, actual,
                "NwisWOFService.GetValuesUSGS.option2UsgsStatCode did not return the expected valu" +
                    "e.");
            // Assert.Inconclusive("Verify the correctness of this test method.");
        }
    
            [TestMethod()]
        public void option2UsgsStatCodeTest5()
        {
            VariableParam vp = new VariableParam("NWIS:00060/ValueType=Maximum");


            string expected = "00001";
            string actual;

            actual = NwisWOFTest.NwisWOFService_GetValuesUSGSAccessor.option2UsgsStatCode(vp);

            Assert.AreEqual(expected, actual,
                "NwisWOFService.GetValuesUSGS.option2UsgsStatCode did not return the expected valu" +
                    "e.");
            // Assert.Inconclusive("Verify the correctness of this test method.");
        }


        #endregion
    }


}
