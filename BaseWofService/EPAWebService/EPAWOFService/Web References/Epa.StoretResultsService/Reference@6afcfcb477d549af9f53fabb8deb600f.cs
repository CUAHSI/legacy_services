//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.832.
// 
#pragma warning disable 1591

namespace EPAWOFService.Epa.StoretResultsService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="StoretResultServiceBinding", Namespace="http://gov.epa.storet.storetresultservice/StoretResultService.wsdl")]
    public partial class StoretResultService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getResultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getResultCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback getActivityCountOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public StoretResultService() {
            this.Url = global::EPAWOFService.Properties.Settings.Default.NwisWOFService_Epa_StoretResultsService_StoretResultService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getResultsCompletedEventHandler getResultsCompleted;
        
        /// <remarks/>
        public event getResultCountCompletedEventHandler getResultCountCompleted;
        
        /// <remarks/>
        public event getActivityCountCompletedEventHandler getActivityCountCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:gov-epa-storet-storetresultservice-StoretResultService/getResults", RequestNamespace="urn:gov-epa-storet-storetresultservice-StoretResultService", ResponseNamespace="urn:gov-epa-storet-storetresultservice-StoretResultService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public object getResults(string OrganizationId, string MonitoringLocationId, string MonitoringLocationType, string MinimumActivityStartDate, string MaximumActivityStartDate, string MinimumLatitude, string MaximumLatitude, string MinimumLongitude, string MaximumLongitude, string CharacteristicType, string CharacteristicName, string ResultType) {
            object[] results = this.Invoke("getResults", new object[] {
                        OrganizationId,
                        MonitoringLocationId,
                        MonitoringLocationType,
                        MinimumActivityStartDate,
                        MaximumActivityStartDate,
                        MinimumLatitude,
                        MaximumLatitude,
                        MinimumLongitude,
                        MaximumLongitude,
                        CharacteristicType,
                        CharacteristicName,
                        ResultType});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void getResultsAsync(string OrganizationId, string MonitoringLocationId, string MonitoringLocationType, string MinimumActivityStartDate, string MaximumActivityStartDate, string MinimumLatitude, string MaximumLatitude, string MinimumLongitude, string MaximumLongitude, string CharacteristicType, string CharacteristicName, string ResultType) {
            this.getResultsAsync(OrganizationId, MonitoringLocationId, MonitoringLocationType, MinimumActivityStartDate, MaximumActivityStartDate, MinimumLatitude, MaximumLatitude, MinimumLongitude, MaximumLongitude, CharacteristicType, CharacteristicName, ResultType, null);
        }
        
        /// <remarks/>
        public void getResultsAsync(string OrganizationId, string MonitoringLocationId, string MonitoringLocationType, string MinimumActivityStartDate, string MaximumActivityStartDate, string MinimumLatitude, string MaximumLatitude, string MinimumLongitude, string MaximumLongitude, string CharacteristicType, string CharacteristicName, string ResultType, object userState) {
            if ((this.getResultsOperationCompleted == null)) {
                this.getResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetResultsOperationCompleted);
            }
            this.InvokeAsync("getResults", new object[] {
                        OrganizationId,
                        MonitoringLocationId,
                        MonitoringLocationType,
                        MinimumActivityStartDate,
                        MaximumActivityStartDate,
                        MinimumLatitude,
                        MaximumLatitude,
                        MinimumLongitude,
                        MaximumLongitude,
                        CharacteristicType,
                        CharacteristicName,
                        ResultType}, this.getResultsOperationCompleted, userState);
        }
        
        private void OngetResultsOperationCompleted(object arg) {
            if ((this.getResultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getResultsCompleted(this, new getResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:gov-epa-storet-storetresultservice-StoretResultService/getResultCount", RequestNamespace="urn:gov-epa-storet-storetresultservice-StoretResultService", ResponseNamespace="urn:gov-epa-storet-storetresultservice-StoretResultService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int getResultCount(string OrganizationId, string MonitoringLocationId, string MonitoringLocationType, string MinimumActivityStartDate, string MaximumActivityStartDate, string MinimumLatitude, string MaximumLatitude, string MinimumLongitude, string MaximumLongitude, string CharacteristicType, string CharacteristicName, string ResultType) {
            object[] results = this.Invoke("getResultCount", new object[] {
                        OrganizationId,
                        MonitoringLocationId,
                        MonitoringLocationType,
                        MinimumActivityStartDate,
                        MaximumActivityStartDate,
                        MinimumLatitude,
                        MaximumLatitude,
                        MinimumLongitude,
                        MaximumLongitude,
                        CharacteristicType,
                        CharacteristicName,
                        ResultType});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getResultCountAsync(string OrganizationId, string MonitoringLocationId, string MonitoringLocationType, string MinimumActivityStartDate, string MaximumActivityStartDate, string MinimumLatitude, string MaximumLatitude, string MinimumLongitude, string MaximumLongitude, string CharacteristicType, string CharacteristicName, string ResultType) {
            this.getResultCountAsync(OrganizationId, MonitoringLocationId, MonitoringLocationType, MinimumActivityStartDate, MaximumActivityStartDate, MinimumLatitude, MaximumLatitude, MinimumLongitude, MaximumLongitude, CharacteristicType, CharacteristicName, ResultType, null);
        }
        
        /// <remarks/>
        public void getResultCountAsync(string OrganizationId, string MonitoringLocationId, string MonitoringLocationType, string MinimumActivityStartDate, string MaximumActivityStartDate, string MinimumLatitude, string MaximumLatitude, string MinimumLongitude, string MaximumLongitude, string CharacteristicType, string CharacteristicName, string ResultType, object userState) {
            if ((this.getResultCountOperationCompleted == null)) {
                this.getResultCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetResultCountOperationCompleted);
            }
            this.InvokeAsync("getResultCount", new object[] {
                        OrganizationId,
                        MonitoringLocationId,
                        MonitoringLocationType,
                        MinimumActivityStartDate,
                        MaximumActivityStartDate,
                        MinimumLatitude,
                        MaximumLatitude,
                        MinimumLongitude,
                        MaximumLongitude,
                        CharacteristicType,
                        CharacteristicName,
                        ResultType}, this.getResultCountOperationCompleted, userState);
        }
        
        private void OngetResultCountOperationCompleted(object arg) {
            if ((this.getResultCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getResultCountCompleted(this, new getResultCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:gov-epa-storet-storetresultservice-StoretResultService/getActivityCount", RequestNamespace="urn:gov-epa-storet-storetresultservice-StoretResultService", ResponseNamespace="urn:gov-epa-storet-storetresultservice-StoretResultService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int getActivityCount(string OrganizationId, string ActivityId, string ActivityType, string MonitoringLocationId, string MonitoringLocationType, string ProjectId, string MinimumActivityStartDate, string MaximumActivityStartDate, string CharacteristicType, string CharacteristicName) {
            object[] results = this.Invoke("getActivityCount", new object[] {
                        OrganizationId,
                        ActivityId,
                        ActivityType,
                        MonitoringLocationId,
                        MonitoringLocationType,
                        ProjectId,
                        MinimumActivityStartDate,
                        MaximumActivityStartDate,
                        CharacteristicType,
                        CharacteristicName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getActivityCountAsync(string OrganizationId, string ActivityId, string ActivityType, string MonitoringLocationId, string MonitoringLocationType, string ProjectId, string MinimumActivityStartDate, string MaximumActivityStartDate, string CharacteristicType, string CharacteristicName) {
            this.getActivityCountAsync(OrganizationId, ActivityId, ActivityType, MonitoringLocationId, MonitoringLocationType, ProjectId, MinimumActivityStartDate, MaximumActivityStartDate, CharacteristicType, CharacteristicName, null);
        }
        
        /// <remarks/>
        public void getActivityCountAsync(string OrganizationId, string ActivityId, string ActivityType, string MonitoringLocationId, string MonitoringLocationType, string ProjectId, string MinimumActivityStartDate, string MaximumActivityStartDate, string CharacteristicType, string CharacteristicName, object userState) {
            if ((this.getActivityCountOperationCompleted == null)) {
                this.getActivityCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetActivityCountOperationCompleted);
            }
            this.InvokeAsync("getActivityCount", new object[] {
                        OrganizationId,
                        ActivityId,
                        ActivityType,
                        MonitoringLocationId,
                        MonitoringLocationType,
                        ProjectId,
                        MinimumActivityStartDate,
                        MaximumActivityStartDate,
                        CharacteristicType,
                        CharacteristicName}, this.getActivityCountOperationCompleted, userState);
        }
        
        private void OngetActivityCountOperationCompleted(object arg) {
            if ((this.getActivityCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getActivityCountCompleted(this, new getActivityCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void getResultsCompletedEventHandler(object sender, getResultsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getResultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getResultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void getResultCountCompletedEventHandler(object sender, getResultCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getResultCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getResultCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void getActivityCountCompletedEventHandler(object sender, getActivityCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getActivityCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getActivityCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591